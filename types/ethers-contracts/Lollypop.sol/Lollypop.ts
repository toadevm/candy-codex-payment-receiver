/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface LollypopInterface extends Interface {
    getFunction(nameOrSignature: "EXTRA_FEE_PERCENTAGE" | "EXTRA_FEE_RECEIVER" | "FEE_RECEIVER" | "INITIAL_MAX_SUPPLY" | "MAX_MINT_PER_TX" | "MAX_TOKENS_PER_BATCH" | "MINT_PRICE" | "REFERRAL_FEE_PERCENTAGE" | "TX_FEE" | "approve" | "approveMarketplace" | "approveMultipleMarketplaces" | "approvedMarketplaces" | "balanceOf" | "blockMultipleTokens" | "blockToken" | "blockTokensByOwner" | "blockedTokens" | "emergencyStop" | "getApproved" | "getBlockedTokensByOwner" | "getReferralStats" | "isApprovedForAll" | "isMarketplaceApproved" | "isTokenBlocked" | "lastMintTime" | "marketplaceRestrictionEnabled" | "maxMintAmountPerTx" | "maxSupply" | "mint" | "mintCooldown" | "mintCount" | "mintForAddress" | "mintWithReferral" | "name" | "owner" | "ownerOf" | "pause" | "paused" | "referralEarnings" | "renounceOwnership" | "revokeMarketplace" | "revokeMultipleMarketplaces" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "setBaseURI" | "setHiddenMetadataUri" | "setMarketplaceRestriction" | "setMaxMintAmountPerTx" | "setMaxSupply" | "setMintCooldown" | "supportsInterface" | "symbol" | "toggleEmergencyStop" | "toggleMarketplaceRestriction" | "tokenURI" | "totalReferrals" | "totalSupply" | "transferFrom" | "transferOwnership" | "unblockMultipleTokens" | "unblockToken" | "unpause" | "withdraw" | "withdrawReferralEarnings"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "EmergencyStopToggled" | "MarketplaceApproved" | "MarketplaceRestrictionToggled" | "MarketplaceRevoked" | "MintCooldownUpdated" | "MultipleTokensBlocked" | "MultipleTokensUnblocked" | "OwnershipTransferred" | "Paused" | "ReferralEarned" | "ReferralWithdrawn" | "SuspiciousActivityDetected" | "TokenBlocked" | "TokenUnblocked" | "Transfer" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'EXTRA_FEE_PERCENTAGE', values?: undefined): string;
encodeFunctionData(functionFragment: 'EXTRA_FEE_RECEIVER', values?: undefined): string;
encodeFunctionData(functionFragment: 'FEE_RECEIVER', values?: undefined): string;
encodeFunctionData(functionFragment: 'INITIAL_MAX_SUPPLY', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_MINT_PER_TX', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_TOKENS_PER_BATCH', values?: undefined): string;
encodeFunctionData(functionFragment: 'MINT_PRICE', values?: undefined): string;
encodeFunctionData(functionFragment: 'REFERRAL_FEE_PERCENTAGE', values?: undefined): string;
encodeFunctionData(functionFragment: 'TX_FEE', values?: undefined): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'approveMarketplace', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'approveMultipleMarketplaces', values: [AddressLike[]]): string;
encodeFunctionData(functionFragment: 'approvedMarketplaces', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'blockMultipleTokens', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'blockToken', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'blockTokensByOwner', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'blockedTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'emergencyStop', values?: undefined): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getBlockedTokensByOwner', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getReferralStats', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isMarketplaceApproved', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isTokenBlocked', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'lastMintTime', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'marketplaceRestrictionEnabled', values?: undefined): string;
encodeFunctionData(functionFragment: 'maxMintAmountPerTx', values?: undefined): string;
encodeFunctionData(functionFragment: 'maxSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'mintCooldown', values?: undefined): string;
encodeFunctionData(functionFragment: 'mintCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'mintForAddress', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'mintWithReferral', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'referralEarnings', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'revokeMarketplace', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeMultipleMarketplaces', values: [AddressLike[]]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
encodeFunctionData(functionFragment: 'setHiddenMetadataUri', values: [string]): string;
encodeFunctionData(functionFragment: 'setMarketplaceRestriction', values: [boolean]): string;
encodeFunctionData(functionFragment: 'setMaxMintAmountPerTx', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setMaxSupply', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setMintCooldown', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'toggleEmergencyStop', values?: undefined): string;
encodeFunctionData(functionFragment: 'toggleMarketplaceRestriction', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalReferrals', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unblockMultipleTokens', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'unblockToken', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawReferralEarnings', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'EXTRA_FEE_PERCENTAGE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'EXTRA_FEE_RECEIVER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FEE_RECEIVER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'INITIAL_MAX_SUPPLY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_MINT_PER_TX', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_TOKENS_PER_BATCH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MINT_PRICE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'REFERRAL_FEE_PERCENTAGE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TX_FEE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approveMarketplace', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approveMultipleMarketplaces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approvedMarketplaces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'blockMultipleTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'blockToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'blockTokensByOwner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'blockedTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyStop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBlockedTokensByOwner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getReferralStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isMarketplaceApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isTokenBlocked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lastMintTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'marketplaceRestrictionEnabled', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxMintAmountPerTx', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintCooldown', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintForAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintWithReferral', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'referralEarnings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeMarketplace', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeMultipleMarketplaces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setHiddenMetadataUri', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMarketplaceRestriction', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMaxMintAmountPerTx', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMaxSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMintCooldown', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'toggleEmergencyStop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'toggleMarketplaceRestriction', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalReferrals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unblockMultipleTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unblockToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawReferralEarnings', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmergencyStopToggledEvent {
      export type InputTuple = [enabled: boolean];
      export type OutputTuple = [enabled: boolean];
      export interface OutputObject {enabled: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MarketplaceApprovedEvent {
      export type InputTuple = [marketplace: AddressLike];
      export type OutputTuple = [marketplace: string];
      export interface OutputObject {marketplace: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MarketplaceRestrictionToggledEvent {
      export type InputTuple = [enabled: boolean];
      export type OutputTuple = [enabled: boolean];
      export interface OutputObject {enabled: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MarketplaceRevokedEvent {
      export type InputTuple = [marketplace: AddressLike];
      export type OutputTuple = [marketplace: string];
      export interface OutputObject {marketplace: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MintCooldownUpdatedEvent {
      export type InputTuple = [newCooldown: BigNumberish];
      export type OutputTuple = [newCooldown: bigint];
      export interface OutputObject {newCooldown: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MultipleTokensBlockedEvent {
      export type InputTuple = [tokenIds: BigNumberish[]];
      export type OutputTuple = [tokenIds: bigint[]];
      export interface OutputObject {tokenIds: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MultipleTokensUnblockedEvent {
      export type InputTuple = [tokenIds: BigNumberish[]];
      export type OutputTuple = [tokenIds: bigint[]];
      export interface OutputObject {tokenIds: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReferralEarnedEvent {
      export type InputTuple = [referrer: AddressLike, minter: AddressLike, amount: BigNumberish];
      export type OutputTuple = [referrer: string, minter: string, amount: bigint];
      export interface OutputObject {referrer: string, minter: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReferralWithdrawnEvent {
      export type InputTuple = [referrer: AddressLike, amount: BigNumberish];
      export type OutputTuple = [referrer: string, amount: bigint];
      export interface OutputObject {referrer: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SuspiciousActivityDetectedEvent {
      export type InputTuple = [user: AddressLike, reason: string];
      export type OutputTuple = [user: string, reason: string];
      export interface OutputObject {user: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenBlockedEvent {
      export type InputTuple = [tokenId: BigNumberish];
      export type OutputTuple = [tokenId: bigint];
      export interface OutputObject {tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenUnblockedEvent {
      export type InputTuple = [tokenId: BigNumberish];
      export type OutputTuple = [tokenId: bigint];
      export interface OutputObject {tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Lollypop extends BaseContract {
    
    connect(runner?: ContractRunner | null): Lollypop;
    waitForDeployment(): Promise<this>;

    interface: LollypopInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    EXTRA_FEE_PERCENTAGE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    EXTRA_FEE_RECEIVER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    FEE_RECEIVER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    INITIAL_MAX_SUPPLY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_MINT_PER_TX: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_TOKENS_PER_BATCH: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MINT_PRICE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    REFERRAL_FEE_PERCENTAGE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    TX_FEE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    approveMarketplace: TypedContractMethod<
      [marketplace: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    approveMultipleMarketplaces: TypedContractMethod<
      [marketplaces: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    approvedMarketplaces: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    blockMultipleTokens: TypedContractMethod<
      [tokenIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    blockToken: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    blockTokensByOwner: TypedContractMethod<
      [tokenOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    blockedTokens: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    emergencyStop: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getBlockedTokensByOwner: TypedContractMethod<
      [tokenOwner: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getReferralStats: TypedContractMethod<
      [referrer: AddressLike, ],
      [[bigint, bigint] & {earnings: bigint, totalReferred: bigint }],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isMarketplaceApproved: TypedContractMethod<
      [marketplace: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isTokenBlocked: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    lastMintTime: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    marketplaceRestrictionEnabled: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    maxMintAmountPerTx: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    maxSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    mint: TypedContractMethod<
      [_mintAmount: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    mintCooldown: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    mintCount: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    mintForAddress: TypedContractMethod<
      [to: AddressLike, mintAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    mintWithReferral: TypedContractMethod<
      [_mintAmount: BigNumberish, referrer: AddressLike, ],
      [void],
      'payable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    referralEarnings: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    revokeMarketplace: TypedContractMethod<
      [marketplace: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeMultipleMarketplaces: TypedContractMethod<
      [marketplaces: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setBaseURI: TypedContractMethod<
      [baseURI: string, ],
      [void],
      'nonpayable'
    >
    

    
    setHiddenMetadataUri: TypedContractMethod<
      [hiddenUri: string, ],
      [void],
      'nonpayable'
    >
    

    
    setMarketplaceRestriction: TypedContractMethod<
      [enabled: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setMaxMintAmountPerTx: TypedContractMethod<
      [newMaxMintAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setMaxSupply: TypedContractMethod<
      [newMaxSupply: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setMintCooldown: TypedContractMethod<
      [newCooldown: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    toggleEmergencyStop: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    toggleMarketplaceRestriction: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    totalReferrals: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unblockMultipleTokens: TypedContractMethod<
      [tokenIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    unblockToken: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdrawReferralEarnings: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'EXTRA_FEE_PERCENTAGE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'EXTRA_FEE_RECEIVER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'FEE_RECEIVER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'INITIAL_MAX_SUPPLY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_MINT_PER_TX'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_TOKENS_PER_BATCH'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MINT_PRICE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'REFERRAL_FEE_PERCENTAGE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'TX_FEE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approveMarketplace'): TypedContractMethod<
      [marketplace: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approveMultipleMarketplaces'): TypedContractMethod<
      [marketplaces: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approvedMarketplaces'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'blockMultipleTokens'): TypedContractMethod<
      [tokenIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'blockToken'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'blockTokensByOwner'): TypedContractMethod<
      [tokenOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'blockedTokens'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'emergencyStop'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getBlockedTokensByOwner'): TypedContractMethod<
      [tokenOwner: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getReferralStats'): TypedContractMethod<
      [referrer: AddressLike, ],
      [[bigint, bigint] & {earnings: bigint, totalReferred: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isMarketplaceApproved'): TypedContractMethod<
      [marketplace: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isTokenBlocked'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'lastMintTime'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'marketplaceRestrictionEnabled'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'maxMintAmountPerTx'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'maxSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'mint'): TypedContractMethod<
      [_mintAmount: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'mintCooldown'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'mintCount'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'mintForAddress'): TypedContractMethod<
      [to: AddressLike, mintAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintWithReferral'): TypedContractMethod<
      [_mintAmount: BigNumberish, referrer: AddressLike, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'referralEarnings'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeMarketplace'): TypedContractMethod<
      [marketplace: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeMultipleMarketplaces'): TypedContractMethod<
      [marketplaces: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setBaseURI'): TypedContractMethod<
      [baseURI: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setHiddenMetadataUri'): TypedContractMethod<
      [hiddenUri: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMarketplaceRestriction'): TypedContractMethod<
      [enabled: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMaxMintAmountPerTx'): TypedContractMethod<
      [newMaxMintAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMaxSupply'): TypedContractMethod<
      [newMaxSupply: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMintCooldown'): TypedContractMethod<
      [newCooldown: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'toggleEmergencyStop'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'toggleMarketplaceRestriction'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalReferrals'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unblockMultipleTokens'): TypedContractMethod<
      [tokenIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unblockToken'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawReferralEarnings'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'EmergencyStopToggled'): TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
getEvent(key: 'MarketplaceApproved'): TypedContractEvent<MarketplaceApprovedEvent.InputTuple, MarketplaceApprovedEvent.OutputTuple, MarketplaceApprovedEvent.OutputObject>;
getEvent(key: 'MarketplaceRestrictionToggled'): TypedContractEvent<MarketplaceRestrictionToggledEvent.InputTuple, MarketplaceRestrictionToggledEvent.OutputTuple, MarketplaceRestrictionToggledEvent.OutputObject>;
getEvent(key: 'MarketplaceRevoked'): TypedContractEvent<MarketplaceRevokedEvent.InputTuple, MarketplaceRevokedEvent.OutputTuple, MarketplaceRevokedEvent.OutputObject>;
getEvent(key: 'MintCooldownUpdated'): TypedContractEvent<MintCooldownUpdatedEvent.InputTuple, MintCooldownUpdatedEvent.OutputTuple, MintCooldownUpdatedEvent.OutputObject>;
getEvent(key: 'MultipleTokensBlocked'): TypedContractEvent<MultipleTokensBlockedEvent.InputTuple, MultipleTokensBlockedEvent.OutputTuple, MultipleTokensBlockedEvent.OutputObject>;
getEvent(key: 'MultipleTokensUnblocked'): TypedContractEvent<MultipleTokensUnblockedEvent.InputTuple, MultipleTokensUnblockedEvent.OutputTuple, MultipleTokensUnblockedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'ReferralEarned'): TypedContractEvent<ReferralEarnedEvent.InputTuple, ReferralEarnedEvent.OutputTuple, ReferralEarnedEvent.OutputObject>;
getEvent(key: 'ReferralWithdrawn'): TypedContractEvent<ReferralWithdrawnEvent.InputTuple, ReferralWithdrawnEvent.OutputTuple, ReferralWithdrawnEvent.OutputObject>;
getEvent(key: 'SuspiciousActivityDetected'): TypedContractEvent<SuspiciousActivityDetectedEvent.InputTuple, SuspiciousActivityDetectedEvent.OutputTuple, SuspiciousActivityDetectedEvent.OutputObject>;
getEvent(key: 'TokenBlocked'): TypedContractEvent<TokenBlockedEvent.InputTuple, TokenBlockedEvent.OutputTuple, TokenBlockedEvent.OutputObject>;
getEvent(key: 'TokenUnblocked'): TypedContractEvent<TokenUnblockedEvent.InputTuple, TokenUnblockedEvent.OutputTuple, TokenUnblockedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'EmergencyStopToggled(bool)': TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
      EmergencyStopToggled: TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
    

      'MarketplaceApproved(address)': TypedContractEvent<MarketplaceApprovedEvent.InputTuple, MarketplaceApprovedEvent.OutputTuple, MarketplaceApprovedEvent.OutputObject>;
      MarketplaceApproved: TypedContractEvent<MarketplaceApprovedEvent.InputTuple, MarketplaceApprovedEvent.OutputTuple, MarketplaceApprovedEvent.OutputObject>;
    

      'MarketplaceRestrictionToggled(bool)': TypedContractEvent<MarketplaceRestrictionToggledEvent.InputTuple, MarketplaceRestrictionToggledEvent.OutputTuple, MarketplaceRestrictionToggledEvent.OutputObject>;
      MarketplaceRestrictionToggled: TypedContractEvent<MarketplaceRestrictionToggledEvent.InputTuple, MarketplaceRestrictionToggledEvent.OutputTuple, MarketplaceRestrictionToggledEvent.OutputObject>;
    

      'MarketplaceRevoked(address)': TypedContractEvent<MarketplaceRevokedEvent.InputTuple, MarketplaceRevokedEvent.OutputTuple, MarketplaceRevokedEvent.OutputObject>;
      MarketplaceRevoked: TypedContractEvent<MarketplaceRevokedEvent.InputTuple, MarketplaceRevokedEvent.OutputTuple, MarketplaceRevokedEvent.OutputObject>;
    

      'MintCooldownUpdated(uint256)': TypedContractEvent<MintCooldownUpdatedEvent.InputTuple, MintCooldownUpdatedEvent.OutputTuple, MintCooldownUpdatedEvent.OutputObject>;
      MintCooldownUpdated: TypedContractEvent<MintCooldownUpdatedEvent.InputTuple, MintCooldownUpdatedEvent.OutputTuple, MintCooldownUpdatedEvent.OutputObject>;
    

      'MultipleTokensBlocked(uint256[])': TypedContractEvent<MultipleTokensBlockedEvent.InputTuple, MultipleTokensBlockedEvent.OutputTuple, MultipleTokensBlockedEvent.OutputObject>;
      MultipleTokensBlocked: TypedContractEvent<MultipleTokensBlockedEvent.InputTuple, MultipleTokensBlockedEvent.OutputTuple, MultipleTokensBlockedEvent.OutputObject>;
    

      'MultipleTokensUnblocked(uint256[])': TypedContractEvent<MultipleTokensUnblockedEvent.InputTuple, MultipleTokensUnblockedEvent.OutputTuple, MultipleTokensUnblockedEvent.OutputObject>;
      MultipleTokensUnblocked: TypedContractEvent<MultipleTokensUnblockedEvent.InputTuple, MultipleTokensUnblockedEvent.OutputTuple, MultipleTokensUnblockedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'ReferralEarned(address,address,uint256)': TypedContractEvent<ReferralEarnedEvent.InputTuple, ReferralEarnedEvent.OutputTuple, ReferralEarnedEvent.OutputObject>;
      ReferralEarned: TypedContractEvent<ReferralEarnedEvent.InputTuple, ReferralEarnedEvent.OutputTuple, ReferralEarnedEvent.OutputObject>;
    

      'ReferralWithdrawn(address,uint256)': TypedContractEvent<ReferralWithdrawnEvent.InputTuple, ReferralWithdrawnEvent.OutputTuple, ReferralWithdrawnEvent.OutputObject>;
      ReferralWithdrawn: TypedContractEvent<ReferralWithdrawnEvent.InputTuple, ReferralWithdrawnEvent.OutputTuple, ReferralWithdrawnEvent.OutputObject>;
    

      'SuspiciousActivityDetected(address,string)': TypedContractEvent<SuspiciousActivityDetectedEvent.InputTuple, SuspiciousActivityDetectedEvent.OutputTuple, SuspiciousActivityDetectedEvent.OutputObject>;
      SuspiciousActivityDetected: TypedContractEvent<SuspiciousActivityDetectedEvent.InputTuple, SuspiciousActivityDetectedEvent.OutputTuple, SuspiciousActivityDetectedEvent.OutputObject>;
    

      'TokenBlocked(uint256)': TypedContractEvent<TokenBlockedEvent.InputTuple, TokenBlockedEvent.OutputTuple, TokenBlockedEvent.OutputObject>;
      TokenBlocked: TypedContractEvent<TokenBlockedEvent.InputTuple, TokenBlockedEvent.OutputTuple, TokenBlockedEvent.OutputObject>;
    

      'TokenUnblocked(uint256)': TypedContractEvent<TokenUnblockedEvent.InputTuple, TokenUnblockedEvent.OutputTuple, TokenUnblockedEvent.OutputObject>;
      TokenUnblocked: TypedContractEvent<TokenUnblockedEvent.InputTuple, TokenUnblockedEvent.OutputTuple, TokenUnblockedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }