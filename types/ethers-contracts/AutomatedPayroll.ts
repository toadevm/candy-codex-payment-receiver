/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace AutomatedPayroll {
      
    export type EmployeeStruct = {employeeAddress: AddressLike, paymentAmount: BigNumberish, tokenAddress: AddressLike, paymentIntervalDays: BigNumberish, lastPaymentTimestamp: BigNumberish, isActive: boolean, exists: boolean}

    export type EmployeeStructOutput = [employeeAddress: string, paymentAmount: bigint, tokenAddress: string, paymentIntervalDays: bigint, lastPaymentTimestamp: bigint, isActive: boolean, exists: boolean] & {employeeAddress: string, paymentAmount: bigint, tokenAddress: string, paymentIntervalDays: bigint, lastPaymentTimestamp: bigint, isActive: boolean, exists: boolean }
  
    }

  export interface AutomatedPayrollInterface extends Interface {
    getFunction(nameOrSignature: "addEmployee" | "depositETH" | "depositTokens" | "employeeList" | "employees" | "executeAllPayments" | "executeBatchPayments" | "executePayment" | "getAllEmployees" | "getContractETHBalance" | "getContractTokenBalance" | "getEligibleEmployees" | "getEmployee" | "getEmployeeCount" | "getNextPaymentDate" | "isPaymentDue" | "owner" | "pauseAllPayments" | "pauseEmployee" | "paused" | "removeEmployee" | "renounceOwnership" | "resumeAllPayments" | "resumeEmployee" | "transferOwnership" | "updateEmployee" | "withdrawETH" | "withdrawTokens"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EmployeeAdded" | "EmployeePaused" | "EmployeeRemoved" | "EmployeeResumed" | "EmployeeUpdated" | "FundsDeposited" | "FundsWithdrawn" | "OwnershipTransferred" | "Paused" | "PaymentExecuted" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'addEmployee', values: [AddressLike, BigNumberish, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'depositETH', values?: undefined): string;
encodeFunctionData(functionFragment: 'depositTokens', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'employeeList', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'employees', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'executeAllPayments', values?: undefined): string;
encodeFunctionData(functionFragment: 'executeBatchPayments', values: [AddressLike[]]): string;
encodeFunctionData(functionFragment: 'executePayment', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getAllEmployees', values?: undefined): string;
encodeFunctionData(functionFragment: 'getContractETHBalance', values?: undefined): string;
encodeFunctionData(functionFragment: 'getContractTokenBalance', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getEligibleEmployees', values?: undefined): string;
encodeFunctionData(functionFragment: 'getEmployee', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getEmployeeCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getNextPaymentDate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isPaymentDue', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'pauseAllPayments', values?: undefined): string;
encodeFunctionData(functionFragment: 'pauseEmployee', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeEmployee', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'resumeAllPayments', values?: undefined): string;
encodeFunctionData(functionFragment: 'resumeEmployee', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateEmployee', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawETH', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawTokens', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'employeeList', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'employees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeAllPayments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeBatchPayments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executePayment', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllEmployees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getContractETHBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getContractTokenBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getEligibleEmployees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getEmployeeCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNextPaymentDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isPaymentDue', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pauseAllPayments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pauseEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'resumeAllPayments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'resumeEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateEmployee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawTokens', data: BytesLike): Result;
  }

  
    export namespace EmployeeAddedEvent {
      export type InputTuple = [employeeAddress: AddressLike, paymentAmount: BigNumberish, tokenAddress: AddressLike, intervalDays: BigNumberish];
      export type OutputTuple = [employeeAddress: string, paymentAmount: bigint, tokenAddress: string, intervalDays: bigint];
      export interface OutputObject {employeeAddress: string, paymentAmount: bigint, tokenAddress: string, intervalDays: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmployeePausedEvent {
      export type InputTuple = [employeeAddress: AddressLike];
      export type OutputTuple = [employeeAddress: string];
      export interface OutputObject {employeeAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmployeeRemovedEvent {
      export type InputTuple = [employeeAddress: AddressLike];
      export type OutputTuple = [employeeAddress: string];
      export interface OutputObject {employeeAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmployeeResumedEvent {
      export type InputTuple = [employeeAddress: AddressLike];
      export type OutputTuple = [employeeAddress: string];
      export interface OutputObject {employeeAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmployeeUpdatedEvent {
      export type InputTuple = [employeeAddress: AddressLike, paymentAmount: BigNumberish, intervalDays: BigNumberish];
      export type OutputTuple = [employeeAddress: string, paymentAmount: bigint, intervalDays: bigint];
      export interface OutputObject {employeeAddress: string, paymentAmount: bigint, intervalDays: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsDepositedEvent {
      export type InputTuple = [tokenAddress: AddressLike, amount: BigNumberish];
      export type OutputTuple = [tokenAddress: string, amount: bigint];
      export interface OutputObject {tokenAddress: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsWithdrawnEvent {
      export type InputTuple = [tokenAddress: AddressLike, amount: BigNumberish];
      export type OutputTuple = [tokenAddress: string, amount: bigint];
      export interface OutputObject {tokenAddress: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PaymentExecutedEvent {
      export type InputTuple = [employeeAddress: AddressLike, amount: BigNumberish, tokenAddress: AddressLike, timestamp: BigNumberish];
      export type OutputTuple = [employeeAddress: string, amount: bigint, tokenAddress: string, timestamp: bigint];
      export interface OutputObject {employeeAddress: string, amount: bigint, tokenAddress: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface AutomatedPayroll extends BaseContract {
    
    connect(runner?: ContractRunner | null): AutomatedPayroll;
    waitForDeployment(): Promise<this>;

    interface: AutomatedPayrollInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, _paymentAmount: BigNumberish, _tokenAddress: AddressLike, _intervalDays: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    depositETH: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    depositTokens: TypedContractMethod<
      [_tokenAddress: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    employeeList: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    employees: TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, bigint, string, bigint, bigint, boolean, boolean] & {employeeAddress: string, paymentAmount: bigint, tokenAddress: string, paymentIntervalDays: bigint, lastPaymentTimestamp: bigint, isActive: boolean, exists: boolean }],
      'view'
    >
    

    
    executeAllPayments: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    executeBatchPayments: TypedContractMethod<
      [_employeeAddresses: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    executePayment: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    getAllEmployees: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getContractETHBalance: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getContractTokenBalance: TypedContractMethod<
      [_tokenAddress: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getEligibleEmployees: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [AutomatedPayroll.EmployeeStructOutput],
      'view'
    >
    

    
    getEmployeeCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getNextPaymentDate: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    isPaymentDue: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    pauseAllPayments: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    pauseEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    removeEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    resumeAllPayments: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    resumeEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateEmployee: TypedContractMethod<
      [_employeeAddress: AddressLike, _paymentAmount: BigNumberish, _intervalDays: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawETH: TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawTokens: TypedContractMethod<
      [_tokenAddress: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, _paymentAmount: BigNumberish, _tokenAddress: AddressLike, _intervalDays: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'depositETH'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'depositTokens'): TypedContractMethod<
      [_tokenAddress: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'employeeList'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'employees'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, bigint, string, bigint, bigint, boolean, boolean] & {employeeAddress: string, paymentAmount: bigint, tokenAddress: string, paymentIntervalDays: bigint, lastPaymentTimestamp: bigint, isActive: boolean, exists: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'executeAllPayments'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'executeBatchPayments'): TypedContractMethod<
      [_employeeAddresses: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'executePayment'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAllEmployees'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getContractETHBalance'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getContractTokenBalance'): TypedContractMethod<
      [_tokenAddress: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getEligibleEmployees'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [AutomatedPayroll.EmployeeStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getEmployeeCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getNextPaymentDate'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isPaymentDue'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pauseAllPayments'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'pauseEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'removeEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'resumeAllPayments'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'resumeEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateEmployee'): TypedContractMethod<
      [_employeeAddress: AddressLike, _paymentAmount: BigNumberish, _intervalDays: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawETH'): TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawTokens'): TypedContractMethod<
      [_tokenAddress: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'EmployeeAdded'): TypedContractEvent<EmployeeAddedEvent.InputTuple, EmployeeAddedEvent.OutputTuple, EmployeeAddedEvent.OutputObject>;
getEvent(key: 'EmployeePaused'): TypedContractEvent<EmployeePausedEvent.InputTuple, EmployeePausedEvent.OutputTuple, EmployeePausedEvent.OutputObject>;
getEvent(key: 'EmployeeRemoved'): TypedContractEvent<EmployeeRemovedEvent.InputTuple, EmployeeRemovedEvent.OutputTuple, EmployeeRemovedEvent.OutputObject>;
getEvent(key: 'EmployeeResumed'): TypedContractEvent<EmployeeResumedEvent.InputTuple, EmployeeResumedEvent.OutputTuple, EmployeeResumedEvent.OutputObject>;
getEvent(key: 'EmployeeUpdated'): TypedContractEvent<EmployeeUpdatedEvent.InputTuple, EmployeeUpdatedEvent.OutputTuple, EmployeeUpdatedEvent.OutputObject>;
getEvent(key: 'FundsDeposited'): TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;
getEvent(key: 'FundsWithdrawn'): TypedContractEvent<FundsWithdrawnEvent.InputTuple, FundsWithdrawnEvent.OutputTuple, FundsWithdrawnEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'PaymentExecuted'): TypedContractEvent<PaymentExecutedEvent.InputTuple, PaymentExecutedEvent.OutputTuple, PaymentExecutedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'EmployeeAdded(address,uint256,address,uint256)': TypedContractEvent<EmployeeAddedEvent.InputTuple, EmployeeAddedEvent.OutputTuple, EmployeeAddedEvent.OutputObject>;
      EmployeeAdded: TypedContractEvent<EmployeeAddedEvent.InputTuple, EmployeeAddedEvent.OutputTuple, EmployeeAddedEvent.OutputObject>;
    

      'EmployeePaused(address)': TypedContractEvent<EmployeePausedEvent.InputTuple, EmployeePausedEvent.OutputTuple, EmployeePausedEvent.OutputObject>;
      EmployeePaused: TypedContractEvent<EmployeePausedEvent.InputTuple, EmployeePausedEvent.OutputTuple, EmployeePausedEvent.OutputObject>;
    

      'EmployeeRemoved(address)': TypedContractEvent<EmployeeRemovedEvent.InputTuple, EmployeeRemovedEvent.OutputTuple, EmployeeRemovedEvent.OutputObject>;
      EmployeeRemoved: TypedContractEvent<EmployeeRemovedEvent.InputTuple, EmployeeRemovedEvent.OutputTuple, EmployeeRemovedEvent.OutputObject>;
    

      'EmployeeResumed(address)': TypedContractEvent<EmployeeResumedEvent.InputTuple, EmployeeResumedEvent.OutputTuple, EmployeeResumedEvent.OutputObject>;
      EmployeeResumed: TypedContractEvent<EmployeeResumedEvent.InputTuple, EmployeeResumedEvent.OutputTuple, EmployeeResumedEvent.OutputObject>;
    

      'EmployeeUpdated(address,uint256,uint256)': TypedContractEvent<EmployeeUpdatedEvent.InputTuple, EmployeeUpdatedEvent.OutputTuple, EmployeeUpdatedEvent.OutputObject>;
      EmployeeUpdated: TypedContractEvent<EmployeeUpdatedEvent.InputTuple, EmployeeUpdatedEvent.OutputTuple, EmployeeUpdatedEvent.OutputObject>;
    

      'FundsDeposited(address,uint256)': TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;
      FundsDeposited: TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;
    

      'FundsWithdrawn(address,uint256)': TypedContractEvent<FundsWithdrawnEvent.InputTuple, FundsWithdrawnEvent.OutputTuple, FundsWithdrawnEvent.OutputObject>;
      FundsWithdrawn: TypedContractEvent<FundsWithdrawnEvent.InputTuple, FundsWithdrawnEvent.OutputTuple, FundsWithdrawnEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'PaymentExecuted(address,uint256,address,uint256)': TypedContractEvent<PaymentExecutedEvent.InputTuple, PaymentExecutedEvent.OutputTuple, PaymentExecutedEvent.OutputObject>;
      PaymentExecuted: TypedContractEvent<PaymentExecutedEvent.InputTuple, PaymentExecutedEvent.OutputTuple, PaymentExecutedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }